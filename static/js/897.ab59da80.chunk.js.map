{"version":3,"file":"static/js/897.ab59da80.chunk.js","mappings":"8QAAaA,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,OAAV,E,uCCmFlC,EAvEoB,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,MACXF,GAAUG,EAAAA,EAAAA,IAAYL,GAC5B,GAIIM,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYC,EAAAA,MAJtBC,EADF,EACEA,SACaC,EAFf,EAEEC,UAAaD,OACbE,EAHF,EAGEA,aAgBF,OACE,UAACC,EAAA,EAAD,CACEC,UAAU,OACVC,GAAI,CACF,kBAAmB,CAAEC,EAAG,EAAGC,MAAO,UAEpCC,YAAU,EACVC,aAAa,MACbC,SAAUR,GAnBW,SAAAS,GACvB,IAAQC,EAAiBD,EAAjBC,KAAMC,EAAWF,EAAXE,OAEK,KAAftB,EAAQuB,GACVtB,GAASuB,EAAAA,EAAAA,IAAa,CAAED,GAAIvB,EAAQuB,GAAIF,KAAAA,EAAMC,OAAAA,KAE9CrB,GAASwB,EAAAA,EAAAA,IAAW,CAAEJ,KAAAA,EAAMC,OAAAA,KAE9BrB,GAASyB,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,MACzB,IAGC,WASE,SAACC,EAAA,GAAD,QACEC,QAASpB,EAAOY,KAChBE,GAAG,OACHO,MAAM,eACNC,QAAQ,WACRC,WAAS,EACTC,aAAcjC,EAAQqB,KACtBa,WAAYzB,EAAOY,KAAOZ,EAAOY,KAAKc,QAAU,IAC5C3B,EAAS,WAEf,SAACoB,EAAA,GAAD,QACEC,QAASpB,EAAOa,OAChBC,GAAG,SACHO,MAAM,eACNC,QAAQ,WACRE,aAAcjC,EAAQsB,OACtBY,WAAYzB,EAAOa,OAASb,EAAOa,OAAOa,QAAU,IAChD3B,EAAS,aAEf,SAAC4B,EAAA,EAAD,CACEL,QAAQ,WACRjB,GAAI,CAAEuB,aAAc,EAAGC,UAAW,GAClCC,KAAK,SAHP,mBAOA,SAACH,EAAA,EAAD,CACEL,QAAQ,WACRjB,GAAI,CAAEuB,aAAc,EAAGC,UAAW,GAClCE,QAAS,WACPvC,GAASyB,EAAAA,EAAAA,IAAeC,EAAAA,GAAAA,MACzB,EALH,oBAWL,C,sHC/EYpB,EAAgBkC,EAAAA,KAAaC,MAAM,CAC9CrB,KAAMoB,EAAAA,KACHE,WACAC,QACC,yHACA,0IAEJtB,OAAQmB,EAAAA,KACLE,WACAC,QACC,6EACA,kGAIOC,EAAaJ,EAAAA,KAAaC,MAAM,CAC3CI,MAAOL,EAAAA,KAAaE,WAAWG,QAC/BC,SAAUN,EAAAA,KAAaE,WAAWK,IAAI,KAG3BC,EAAiBR,EAAAA,KAAaC,MAAM,CAC/CQ,MAAOT,EAAAA,KAAaE,WAAWK,IAAI,GACnCF,MAAOL,EAAAA,KAAaE,WAAWG,QAC/BC,SAAUN,EAAAA,KAAaE,WAAWK,IAAI,I","sources":["redux/contact/selectors.js","components/Contacts/ContactInfo/ContactInfo.jsx","services/yup.js"],"sourcesContent":["export const selectContact = state => state.contact;\n","import React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { modalsType, setModalStatus } from 'redux/modals/slice';\nimport { addContact, patchContact } from 'redux/contacts/operation';\nimport { selectContact } from 'redux/contact/selectors';\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { ContactSchema } from 'services/yup';\n\nconst ContactInfo = () => {\n  const dispatch = useDispatch();\n  const contact = useSelector(selectContact);\n  const {\n    register,\n    formState: { errors },\n    handleSubmit,\n  } = useForm({\n    resolver: yupResolver(ContactSchema),\n  });\n\n  const handleSubmitForm = data => {\n    const { name, number } = data;\n\n    if (contact.id !== '') {\n      dispatch(patchContact({ id: contact.id, name, number }));\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    dispatch(setModalStatus(modalsType.NULL));\n  };\n\n  return (\n    <Box\n      component=\"form\"\n      sx={{\n        '& > :not(style)': { m: 1, width: '380px' },\n      }}\n      noValidate\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(handleSubmitForm)}\n    >\n      <TextField\n        error={!!errors.name}\n        id=\"name\"\n        label=\"Contact name\"\n        variant=\"outlined\"\n        autoFocus\n        defaultValue={contact.name}\n        helperText={errors.name ? errors.name.message : ''}\n        {...register('name')}\n      />\n      <TextField\n        error={!!errors.number}\n        id=\"number\"\n        label=\"Phone number\"\n        variant=\"outlined\"\n        defaultValue={contact.number}\n        helperText={errors.number ? errors.number.message : ''}\n        {...register('number')}\n      />\n      <Button\n        variant=\"outlined\"\n        sx={{ marginBottom: 2, marginTop: 2 }}\n        type=\"submit\"\n      >\n        Save\n      </Button>\n      <Button\n        variant=\"outlined\"\n        sx={{ marginBottom: 2, marginTop: 2 }}\n        onClick={() => {\n          dispatch(setModalStatus(modalsType.NULL));\n        }}\n      >\n        Exit\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactInfo;\n","import * as Yup from 'yup';\n\nexport const ContactSchema = Yup.object().shape({\n  name: Yup.string()\n    .required()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: Yup.string()\n    .required()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const AuthSchema = Yup.object().shape({\n  email: Yup.string().required().email(),\n  password: Yup.string().required().min(6),\n});\n\nexport const RegisterSchema = Yup.object().shape({\n  login: Yup.string().required().min(6),\n  email: Yup.string().required().email(),\n  password: Yup.string().required().min(6),\n});\n"],"names":["selectContact","state","contact","dispatch","useDispatch","useSelector","useForm","resolver","yupResolver","ContactSchema","register","errors","formState","handleSubmit","Box","component","sx","m","width","noValidate","autoComplete","onSubmit","data","name","number","id","patchContact","addContact","setModalStatus","modalsType","TextField","error","label","variant","autoFocus","defaultValue","helperText","message","Button","marginBottom","marginTop","type","onClick","Yup","shape","required","matches","AuthSchema","email","password","min","RegisterSchema","login"],"sourceRoot":""}